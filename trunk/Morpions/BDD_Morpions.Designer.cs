//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.1433
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Morpions {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BDD_Morpions")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BDD_Morpions : global::System.Data.DataSet {
        
        private USERDataTable tableUSER;
        
        private SCORE_HISTORIQUEDataTable tableSCORE_HISTORIQUE;
        
        private global::System.Data.DataRelation relationFK_SCORE_HI_REFERENCE_USER;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BDD_Morpions() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BDD_Morpions(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["USER"] != null)) {
                    base.Tables.Add(new USERDataTable(ds.Tables["USER"]));
                }
                if ((ds.Tables["SCORE_HISTORIQUE"] != null)) {
                    base.Tables.Add(new SCORE_HISTORIQUEDataTable(ds.Tables["SCORE_HISTORIQUE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USERDataTable USER {
            get {
                return this.tableUSER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SCORE_HISTORIQUEDataTable SCORE_HISTORIQUE {
            get {
                return this.tableSCORE_HISTORIQUE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BDD_Morpions cln = ((BDD_Morpions)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["USER"] != null)) {
                    base.Tables.Add(new USERDataTable(ds.Tables["USER"]));
                }
                if ((ds.Tables["SCORE_HISTORIQUE"] != null)) {
                    base.Tables.Add(new SCORE_HISTORIQUEDataTable(ds.Tables["SCORE_HISTORIQUE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUSER = ((USERDataTable)(base.Tables["USER"]));
            if ((initTable == true)) {
                if ((this.tableUSER != null)) {
                    this.tableUSER.InitVars();
                }
            }
            this.tableSCORE_HISTORIQUE = ((SCORE_HISTORIQUEDataTable)(base.Tables["SCORE_HISTORIQUE"]));
            if ((initTable == true)) {
                if ((this.tableSCORE_HISTORIQUE != null)) {
                    this.tableSCORE_HISTORIQUE.InitVars();
                }
            }
            this.relationFK_SCORE_HI_REFERENCE_USER = this.Relations["FK_SCORE_HI_REFERENCE_USER"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BDD_Morpions";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BDD_Morpions.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUSER = new USERDataTable();
            base.Tables.Add(this.tableUSER);
            this.tableSCORE_HISTORIQUE = new SCORE_HISTORIQUEDataTable();
            base.Tables.Add(this.tableSCORE_HISTORIQUE);
            this.relationFK_SCORE_HI_REFERENCE_USER = new global::System.Data.DataRelation("FK_SCORE_HI_REFERENCE_USER", new global::System.Data.DataColumn[] {
                        this.tableUSER.USER_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableSCORE_HISTORIQUE.USER_IDColumn}, false);
            this.Relations.Add(this.relationFK_SCORE_HI_REFERENCE_USER);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUSER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSCORE_HISTORIQUE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BDD_Morpions ds = new BDD_Morpions();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void USERRowChangeEventHandler(object sender, USERRowChangeEvent e);
        
        public delegate void SCORE_HISTORIQUERowChangeEventHandler(object sender, SCORE_HISTORIQUERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USERDataTable : global::System.Data.TypedTableBase<USERRow> {
            
            private global::System.Data.DataColumn columnUSER_ID;
            
            private global::System.Data.DataColumn columnUSER_LOGIN;
            
            private global::System.Data.DataColumn columnUSER_PASSWORD;
            
            private global::System.Data.DataColumn columnUSER_EMAIL;
            
            private global::System.Data.DataColumn columnUSER_NAME;
            
            private global::System.Data.DataColumn columnUSER_SURNAME;
            
            private global::System.Data.DataColumn columnUSER_IP;
            
            private global::System.Data.DataColumn columnUSER_WIN_PLAYER;
            
            private global::System.Data.DataColumn columnUSER_WIN_COMPUTER;
            
            private global::System.Data.DataColumn columnUSER_DRAW_PLAYER;
            
            private global::System.Data.DataColumn columnUSER_DRAW_COMPUTER;
            
            private global::System.Data.DataColumn columnUSER_LOSE_PLAYER;
            
            private global::System.Data.DataColumn columnUSER_LOSE_COMPUTER;
            
            private global::System.Data.DataColumn columnUSER_XP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERDataTable() {
                this.TableName = "USER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected USERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_IDColumn {
                get {
                    return this.columnUSER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_LOGINColumn {
                get {
                    return this.columnUSER_LOGIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_PASSWORDColumn {
                get {
                    return this.columnUSER_PASSWORD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_EMAILColumn {
                get {
                    return this.columnUSER_EMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NAMEColumn {
                get {
                    return this.columnUSER_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_SURNAMEColumn {
                get {
                    return this.columnUSER_SURNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_IPColumn {
                get {
                    return this.columnUSER_IP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_WIN_PLAYERColumn {
                get {
                    return this.columnUSER_WIN_PLAYER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_WIN_COMPUTERColumn {
                get {
                    return this.columnUSER_WIN_COMPUTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_DRAW_PLAYERColumn {
                get {
                    return this.columnUSER_DRAW_PLAYER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_DRAW_COMPUTERColumn {
                get {
                    return this.columnUSER_DRAW_COMPUTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_LOSE_PLAYERColumn {
                get {
                    return this.columnUSER_LOSE_PLAYER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_LOSE_COMPUTERColumn {
                get {
                    return this.columnUSER_LOSE_COMPUTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_XPColumn {
                get {
                    return this.columnUSER_XP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRow this[int index] {
                get {
                    return ((USERRow)(this.Rows[index]));
                }
            }
            
            public event USERRowChangeEventHandler USERRowChanging;
            
            public event USERRowChangeEventHandler USERRowChanged;
            
            public event USERRowChangeEventHandler USERRowDeleting;
            
            public event USERRowChangeEventHandler USERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUSERRow(USERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRow AddUSERRow(int USER_ID, string USER_LOGIN, string USER_PASSWORD, string USER_EMAIL, string USER_NAME, string USER_SURNAME, string USER_IP, int USER_WIN_PLAYER, int USER_WIN_COMPUTER, int USER_DRAW_PLAYER, int USER_DRAW_COMPUTER, int USER_LOSE_PLAYER, int USER_LOSE_COMPUTER, int USER_XP) {
                USERRow rowUSERRow = ((USERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        USER_ID,
                        USER_LOGIN,
                        USER_PASSWORD,
                        USER_EMAIL,
                        USER_NAME,
                        USER_SURNAME,
                        USER_IP,
                        USER_WIN_PLAYER,
                        USER_WIN_COMPUTER,
                        USER_DRAW_PLAYER,
                        USER_DRAW_COMPUTER,
                        USER_LOSE_PLAYER,
                        USER_LOSE_COMPUTER,
                        USER_XP};
                rowUSERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUSERRow);
                return rowUSERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRow FindByUSER_ID(int USER_ID) {
                return ((USERRow)(this.Rows.Find(new object[] {
                            USER_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                USERDataTable cln = ((USERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new USERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUSER_ID = base.Columns["USER_ID"];
                this.columnUSER_LOGIN = base.Columns["USER_LOGIN"];
                this.columnUSER_PASSWORD = base.Columns["USER_PASSWORD"];
                this.columnUSER_EMAIL = base.Columns["USER_EMAIL"];
                this.columnUSER_NAME = base.Columns["USER_NAME"];
                this.columnUSER_SURNAME = base.Columns["USER_SURNAME"];
                this.columnUSER_IP = base.Columns["USER_IP"];
                this.columnUSER_WIN_PLAYER = base.Columns["USER_WIN_PLAYER"];
                this.columnUSER_WIN_COMPUTER = base.Columns["USER_WIN_COMPUTER"];
                this.columnUSER_DRAW_PLAYER = base.Columns["USER_DRAW_PLAYER"];
                this.columnUSER_DRAW_COMPUTER = base.Columns["USER_DRAW_COMPUTER"];
                this.columnUSER_LOSE_PLAYER = base.Columns["USER_LOSE_PLAYER"];
                this.columnUSER_LOSE_COMPUTER = base.Columns["USER_LOSE_COMPUTER"];
                this.columnUSER_XP = base.Columns["USER_XP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUSER_ID = new global::System.Data.DataColumn("USER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_ID);
                this.columnUSER_LOGIN = new global::System.Data.DataColumn("USER_LOGIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_LOGIN);
                this.columnUSER_PASSWORD = new global::System.Data.DataColumn("USER_PASSWORD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_PASSWORD);
                this.columnUSER_EMAIL = new global::System.Data.DataColumn("USER_EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_EMAIL);
                this.columnUSER_NAME = new global::System.Data.DataColumn("USER_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NAME);
                this.columnUSER_SURNAME = new global::System.Data.DataColumn("USER_SURNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_SURNAME);
                this.columnUSER_IP = new global::System.Data.DataColumn("USER_IP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_IP);
                this.columnUSER_WIN_PLAYER = new global::System.Data.DataColumn("USER_WIN_PLAYER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_WIN_PLAYER);
                this.columnUSER_WIN_COMPUTER = new global::System.Data.DataColumn("USER_WIN_COMPUTER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_WIN_COMPUTER);
                this.columnUSER_DRAW_PLAYER = new global::System.Data.DataColumn("USER_DRAW_PLAYER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_DRAW_PLAYER);
                this.columnUSER_DRAW_COMPUTER = new global::System.Data.DataColumn("USER_DRAW_COMPUTER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_DRAW_COMPUTER);
                this.columnUSER_LOSE_PLAYER = new global::System.Data.DataColumn("USER_LOSE_PLAYER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_LOSE_PLAYER);
                this.columnUSER_LOSE_COMPUTER = new global::System.Data.DataColumn("USER_LOSE_COMPUTER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_LOSE_COMPUTER);
                this.columnUSER_XP = new global::System.Data.DataColumn("USER_XP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_XP);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUSER_ID}, true));
                this.columnUSER_ID.AllowDBNull = false;
                this.columnUSER_ID.Unique = true;
                this.columnUSER_LOGIN.MaxLength = 20;
                this.columnUSER_PASSWORD.MaxLength = 40;
                this.columnUSER_EMAIL.MaxLength = 50;
                this.columnUSER_NAME.MaxLength = 20;
                this.columnUSER_SURNAME.MaxLength = 20;
                this.columnUSER_IP.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRow NewUSERRow() {
                return ((USERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new USERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(USERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USERRowChanged != null)) {
                    this.USERRowChanged(this, new USERRowChangeEvent(((USERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USERRowChanging != null)) {
                    this.USERRowChanging(this, new USERRowChangeEvent(((USERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USERRowDeleted != null)) {
                    this.USERRowDeleted(this, new USERRowChangeEvent(((USERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USERRowDeleting != null)) {
                    this.USERRowDeleting(this, new USERRowChangeEvent(((USERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUSERRow(USERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BDD_Morpions ds = new BDD_Morpions();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SCORE_HISTORIQUEDataTable : global::System.Data.TypedTableBase<SCORE_HISTORIQUERow> {
            
            private global::System.Data.DataColumn columnUSER_ID;
            
            private global::System.Data.DataColumn columnHISTO_DATE;
            
            private global::System.Data.DataColumn columnHISTO_WIN_PLAYER;
            
            private global::System.Data.DataColumn columnHISTO_WIN_COMPUTER;
            
            private global::System.Data.DataColumn columnHISTO_DRAW_PLAYER;
            
            private global::System.Data.DataColumn columnHISTO_DRAW_COMPUTER;
            
            private global::System.Data.DataColumn columnHISTO_LOSE_PLAYER;
            
            private global::System.Data.DataColumn columnHISTO_LOSE_COMPUTER;
            
            private global::System.Data.DataColumn columnHISTO_XP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUEDataTable() {
                this.TableName = "SCORE_HISTORIQUE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCORE_HISTORIQUEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SCORE_HISTORIQUEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_IDColumn {
                get {
                    return this.columnUSER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_DATEColumn {
                get {
                    return this.columnHISTO_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_WIN_PLAYERColumn {
                get {
                    return this.columnHISTO_WIN_PLAYER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_WIN_COMPUTERColumn {
                get {
                    return this.columnHISTO_WIN_COMPUTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_DRAW_PLAYERColumn {
                get {
                    return this.columnHISTO_DRAW_PLAYER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_DRAW_COMPUTERColumn {
                get {
                    return this.columnHISTO_DRAW_COMPUTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_LOSE_PLAYERColumn {
                get {
                    return this.columnHISTO_LOSE_PLAYER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_LOSE_COMPUTERColumn {
                get {
                    return this.columnHISTO_LOSE_COMPUTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTO_XPColumn {
                get {
                    return this.columnHISTO_XP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERow this[int index] {
                get {
                    return ((SCORE_HISTORIQUERow)(this.Rows[index]));
                }
            }
            
            public event SCORE_HISTORIQUERowChangeEventHandler SCORE_HISTORIQUERowChanging;
            
            public event SCORE_HISTORIQUERowChangeEventHandler SCORE_HISTORIQUERowChanged;
            
            public event SCORE_HISTORIQUERowChangeEventHandler SCORE_HISTORIQUERowDeleting;
            
            public event SCORE_HISTORIQUERowChangeEventHandler SCORE_HISTORIQUERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSCORE_HISTORIQUERow(SCORE_HISTORIQUERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERow AddSCORE_HISTORIQUERow(USERRow parentUSERRowByFK_SCORE_HI_REFERENCE_USER, System.DateTime HISTO_DATE, int HISTO_WIN_PLAYER, int HISTO_WIN_COMPUTER, int HISTO_DRAW_PLAYER, int HISTO_DRAW_COMPUTER, int HISTO_LOSE_PLAYER, int HISTO_LOSE_COMPUTER, int HISTO_XP) {
                SCORE_HISTORIQUERow rowSCORE_HISTORIQUERow = ((SCORE_HISTORIQUERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HISTO_DATE,
                        HISTO_WIN_PLAYER,
                        HISTO_WIN_COMPUTER,
                        HISTO_DRAW_PLAYER,
                        HISTO_DRAW_COMPUTER,
                        HISTO_LOSE_PLAYER,
                        HISTO_LOSE_COMPUTER,
                        HISTO_XP};
                if ((parentUSERRowByFK_SCORE_HI_REFERENCE_USER != null)) {
                    columnValuesArray[0] = parentUSERRowByFK_SCORE_HI_REFERENCE_USER[0];
                }
                rowSCORE_HISTORIQUERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSCORE_HISTORIQUERow);
                return rowSCORE_HISTORIQUERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERow FindByUSER_IDHISTO_DATE(int USER_ID, System.DateTime HISTO_DATE) {
                return ((SCORE_HISTORIQUERow)(this.Rows.Find(new object[] {
                            USER_ID,
                            HISTO_DATE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SCORE_HISTORIQUEDataTable cln = ((SCORE_HISTORIQUEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SCORE_HISTORIQUEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUSER_ID = base.Columns["USER_ID"];
                this.columnHISTO_DATE = base.Columns["HISTO_DATE"];
                this.columnHISTO_WIN_PLAYER = base.Columns["HISTO_WIN_PLAYER"];
                this.columnHISTO_WIN_COMPUTER = base.Columns["HISTO_WIN_COMPUTER"];
                this.columnHISTO_DRAW_PLAYER = base.Columns["HISTO_DRAW_PLAYER"];
                this.columnHISTO_DRAW_COMPUTER = base.Columns["HISTO_DRAW_COMPUTER"];
                this.columnHISTO_LOSE_PLAYER = base.Columns["HISTO_LOSE_PLAYER"];
                this.columnHISTO_LOSE_COMPUTER = base.Columns["HISTO_LOSE_COMPUTER"];
                this.columnHISTO_XP = base.Columns["HISTO_XP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUSER_ID = new global::System.Data.DataColumn("USER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_ID);
                this.columnHISTO_DATE = new global::System.Data.DataColumn("HISTO_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_DATE);
                this.columnHISTO_WIN_PLAYER = new global::System.Data.DataColumn("HISTO_WIN_PLAYER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_WIN_PLAYER);
                this.columnHISTO_WIN_COMPUTER = new global::System.Data.DataColumn("HISTO_WIN_COMPUTER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_WIN_COMPUTER);
                this.columnHISTO_DRAW_PLAYER = new global::System.Data.DataColumn("HISTO_DRAW_PLAYER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_DRAW_PLAYER);
                this.columnHISTO_DRAW_COMPUTER = new global::System.Data.DataColumn("HISTO_DRAW_COMPUTER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_DRAW_COMPUTER);
                this.columnHISTO_LOSE_PLAYER = new global::System.Data.DataColumn("HISTO_LOSE_PLAYER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_LOSE_PLAYER);
                this.columnHISTO_LOSE_COMPUTER = new global::System.Data.DataColumn("HISTO_LOSE_COMPUTER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_LOSE_COMPUTER);
                this.columnHISTO_XP = new global::System.Data.DataColumn("HISTO_XP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTO_XP);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUSER_ID,
                                this.columnHISTO_DATE}, true));
                this.columnUSER_ID.AllowDBNull = false;
                this.columnHISTO_DATE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERow NewSCORE_HISTORIQUERow() {
                return ((SCORE_HISTORIQUERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SCORE_HISTORIQUERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SCORE_HISTORIQUERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SCORE_HISTORIQUERowChanged != null)) {
                    this.SCORE_HISTORIQUERowChanged(this, new SCORE_HISTORIQUERowChangeEvent(((SCORE_HISTORIQUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SCORE_HISTORIQUERowChanging != null)) {
                    this.SCORE_HISTORIQUERowChanging(this, new SCORE_HISTORIQUERowChangeEvent(((SCORE_HISTORIQUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SCORE_HISTORIQUERowDeleted != null)) {
                    this.SCORE_HISTORIQUERowDeleted(this, new SCORE_HISTORIQUERowChangeEvent(((SCORE_HISTORIQUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SCORE_HISTORIQUERowDeleting != null)) {
                    this.SCORE_HISTORIQUERowDeleting(this, new SCORE_HISTORIQUERowChangeEvent(((SCORE_HISTORIQUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSCORE_HISTORIQUERow(SCORE_HISTORIQUERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BDD_Morpions ds = new BDD_Morpions();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SCORE_HISTORIQUEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class USERRow : global::System.Data.DataRow {
            
            private USERDataTable tableUSER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSER = ((USERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_ID {
                get {
                    return ((int)(this[this.tableUSER.USER_IDColumn]));
                }
                set {
                    this[this.tableUSER.USER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_LOGIN {
                get {
                    try {
                        return ((string)(this[this.tableUSER.USER_LOGINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_LOGIN\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_LOGINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_PASSWORD {
                get {
                    try {
                        return ((string)(this[this.tableUSER.USER_PASSWORDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_PASSWORD\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_PASSWORDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_EMAIL {
                get {
                    try {
                        return ((string)(this[this.tableUSER.USER_EMAILColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_EMAIL\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_NAME {
                get {
                    try {
                        return ((string)(this[this.tableUSER.USER_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_NAME\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_SURNAME {
                get {
                    try {
                        return ((string)(this[this.tableUSER.USER_SURNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_SURNAME\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_SURNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_IP {
                get {
                    try {
                        return ((string)(this[this.tableUSER.USER_IPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_IP\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_WIN_PLAYER {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_WIN_PLAYERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_WIN_PLAYER\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_WIN_PLAYERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_WIN_COMPUTER {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_WIN_COMPUTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_WIN_COMPUTER\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_WIN_COMPUTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_DRAW_PLAYER {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_DRAW_PLAYERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_DRAW_PLAYER\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_DRAW_PLAYERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_DRAW_COMPUTER {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_DRAW_COMPUTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_DRAW_COMPUTER\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_DRAW_COMPUTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_LOSE_PLAYER {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_LOSE_PLAYERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_LOSE_PLAYER\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_LOSE_PLAYERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_LOSE_COMPUTER {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_LOSE_COMPUTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_LOSE_COMPUTER\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_LOSE_COMPUTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_XP {
                get {
                    try {
                        return ((int)(this[this.tableUSER.USER_XPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'USER_XP\' dans la table \'USER\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER.USER_XPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_LOGINNull() {
                return this.IsNull(this.tableUSER.USER_LOGINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_LOGINNull() {
                this[this.tableUSER.USER_LOGINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_PASSWORDNull() {
                return this.IsNull(this.tableUSER.USER_PASSWORDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_PASSWORDNull() {
                this[this.tableUSER.USER_PASSWORDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_EMAILNull() {
                return this.IsNull(this.tableUSER.USER_EMAILColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_EMAILNull() {
                this[this.tableUSER.USER_EMAILColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NAMENull() {
                return this.IsNull(this.tableUSER.USER_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NAMENull() {
                this[this.tableUSER.USER_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_SURNAMENull() {
                return this.IsNull(this.tableUSER.USER_SURNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_SURNAMENull() {
                this[this.tableUSER.USER_SURNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_IPNull() {
                return this.IsNull(this.tableUSER.USER_IPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_IPNull() {
                this[this.tableUSER.USER_IPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_WIN_PLAYERNull() {
                return this.IsNull(this.tableUSER.USER_WIN_PLAYERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_WIN_PLAYERNull() {
                this[this.tableUSER.USER_WIN_PLAYERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_WIN_COMPUTERNull() {
                return this.IsNull(this.tableUSER.USER_WIN_COMPUTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_WIN_COMPUTERNull() {
                this[this.tableUSER.USER_WIN_COMPUTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_DRAW_PLAYERNull() {
                return this.IsNull(this.tableUSER.USER_DRAW_PLAYERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_DRAW_PLAYERNull() {
                this[this.tableUSER.USER_DRAW_PLAYERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_DRAW_COMPUTERNull() {
                return this.IsNull(this.tableUSER.USER_DRAW_COMPUTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_DRAW_COMPUTERNull() {
                this[this.tableUSER.USER_DRAW_COMPUTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_LOSE_PLAYERNull() {
                return this.IsNull(this.tableUSER.USER_LOSE_PLAYERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_LOSE_PLAYERNull() {
                this[this.tableUSER.USER_LOSE_PLAYERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_LOSE_COMPUTERNull() {
                return this.IsNull(this.tableUSER.USER_LOSE_COMPUTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_LOSE_COMPUTERNull() {
                this[this.tableUSER.USER_LOSE_COMPUTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_XPNull() {
                return this.IsNull(this.tableUSER.USER_XPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_XPNull() {
                this[this.tableUSER.USER_XPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERow[] GetSCORE_HISTORIQUERows() {
                if ((this.Table.ChildRelations["FK_SCORE_HI_REFERENCE_USER"] == null)) {
                    return new SCORE_HISTORIQUERow[0];
                }
                else {
                    return ((SCORE_HISTORIQUERow[])(base.GetChildRows(this.Table.ChildRelations["FK_SCORE_HI_REFERENCE_USER"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SCORE_HISTORIQUERow : global::System.Data.DataRow {
            
            private SCORE_HISTORIQUEDataTable tableSCORE_HISTORIQUE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCORE_HISTORIQUERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSCORE_HISTORIQUE = ((SCORE_HISTORIQUEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_ID {
                get {
                    return ((int)(this[this.tableSCORE_HISTORIQUE.USER_IDColumn]));
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.USER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HISTO_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableSCORE_HISTORIQUE.HISTO_DATEColumn]));
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_WIN_PLAYER {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_WIN_PLAYERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_WIN_PLAYER\' dans la table \'SCORE_HISTORIQUE\' est" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_WIN_PLAYERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_WIN_COMPUTER {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_WIN_COMPUTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_WIN_COMPUTER\' dans la table \'SCORE_HISTORIQUE\' e" +
                                "st DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_WIN_COMPUTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_DRAW_PLAYER {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_DRAW_PLAYERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_DRAW_PLAYER\' dans la table \'SCORE_HISTORIQUE\' es" +
                                "t DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_DRAW_PLAYERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_DRAW_COMPUTER {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_DRAW_COMPUTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_DRAW_COMPUTER\' dans la table \'SCORE_HISTORIQUE\' " +
                                "est DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_DRAW_COMPUTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_LOSE_PLAYER {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_LOSE_PLAYERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_LOSE_PLAYER\' dans la table \'SCORE_HISTORIQUE\' es" +
                                "t DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_LOSE_PLAYERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_LOSE_COMPUTER {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_LOSE_COMPUTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_LOSE_COMPUTER\' dans la table \'SCORE_HISTORIQUE\' " +
                                "est DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_LOSE_COMPUTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HISTO_XP {
                get {
                    try {
                        return ((int)(this[this.tableSCORE_HISTORIQUE.HISTO_XPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'HISTO_XP\' dans la table \'SCORE_HISTORIQUE\' est DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSCORE_HISTORIQUE.HISTO_XPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRow USERRow {
                get {
                    return ((USERRow)(this.GetParentRow(this.Table.ParentRelations["FK_SCORE_HI_REFERENCE_USER"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SCORE_HI_REFERENCE_USER"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_WIN_PLAYERNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_WIN_PLAYERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_WIN_PLAYERNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_WIN_PLAYERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_WIN_COMPUTERNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_WIN_COMPUTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_WIN_COMPUTERNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_WIN_COMPUTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_DRAW_PLAYERNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_DRAW_PLAYERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_DRAW_PLAYERNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_DRAW_PLAYERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_DRAW_COMPUTERNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_DRAW_COMPUTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_DRAW_COMPUTERNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_DRAW_COMPUTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_LOSE_PLAYERNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_LOSE_PLAYERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_LOSE_PLAYERNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_LOSE_PLAYERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_LOSE_COMPUTERNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_LOSE_COMPUTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_LOSE_COMPUTERNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_LOSE_COMPUTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTO_XPNull() {
                return this.IsNull(this.tableSCORE_HISTORIQUE.HISTO_XPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTO_XPNull() {
                this[this.tableSCORE_HISTORIQUE.HISTO_XPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class USERRowChangeEvent : global::System.EventArgs {
            
            private USERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRowChangeEvent(USERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SCORE_HISTORIQUERowChangeEvent : global::System.EventArgs {
            
            private SCORE_HISTORIQUERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERowChangeEvent(SCORE_HISTORIQUERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCORE_HISTORIQUERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Morpions.BDD_MorpionsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class USERTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "USER";
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID");
            tableMapping.ColumnMappings.Add("USER_LOGIN", "USER_LOGIN");
            tableMapping.ColumnMappings.Add("USER_PASSWORD", "USER_PASSWORD");
            tableMapping.ColumnMappings.Add("USER_EMAIL", "USER_EMAIL");
            tableMapping.ColumnMappings.Add("USER_NAME", "USER_NAME");
            tableMapping.ColumnMappings.Add("USER_SURNAME", "USER_SURNAME");
            tableMapping.ColumnMappings.Add("USER_IP", "USER_IP");
            tableMapping.ColumnMappings.Add("USER_WIN_PLAYER", "USER_WIN_PLAYER");
            tableMapping.ColumnMappings.Add("USER_WIN_COMPUTER", "USER_WIN_COMPUTER");
            tableMapping.ColumnMappings.Add("USER_DRAW_PLAYER", "USER_DRAW_PLAYER");
            tableMapping.ColumnMappings.Add("USER_DRAW_COMPUTER", "USER_DRAW_COMPUTER");
            tableMapping.ColumnMappings.Add("USER_LOSE_PLAYER", "USER_LOSE_PLAYER");
            tableMapping.ColumnMappings.Add("USER_LOSE_COMPUTER", "USER_LOSE_COMPUTER");
            tableMapping.ColumnMappings.Add("USER_XP", "USER_XP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [USER] WHERE (([USER_ID] = @Original_USER_ID) AND ((@IsNull_USER_LOGIN = 1 AND [USER_LOGIN] IS NULL) OR ([USER_LOGIN] = @Original_USER_LOGIN)) AND ((@IsNull_USER_PASSWORD = 1 AND [USER_PASSWORD] IS NULL) OR ([USER_PASSWORD] = @Original_USER_PASSWORD)) AND ((@IsNull_USER_EMAIL = 1 AND [USER_EMAIL] IS NULL) OR ([USER_EMAIL] = @Original_USER_EMAIL)) AND ((@IsNull_USER_NAME = 1 AND [USER_NAME] IS NULL) OR ([USER_NAME] = @Original_USER_NAME)) AND ((@IsNull_USER_SURNAME = 1 AND [USER_SURNAME] IS NULL) OR ([USER_SURNAME] = @Original_USER_SURNAME)) AND ((@IsNull_USER_IP = 1 AND [USER_IP] IS NULL) OR ([USER_IP] = @Original_USER_IP)) AND ((@IsNull_USER_WIN_PLAYER = 1 AND [USER_WIN_PLAYER] IS NULL) OR ([USER_WIN_PLAYER] = @Original_USER_WIN_PLAYER)) AND ((@IsNull_USER_WIN_COMPUTER = 1 AND [USER_WIN_COMPUTER] IS NULL) OR ([USER_WIN_COMPUTER] = @Original_USER_WIN_COMPUTER)) AND ((@IsNull_USER_DRAW_PLAYER = 1 AND [USER_DRAW_PLAYER] IS NULL) OR ([USER_DRAW_PLAYER] = @Original_USER_DRAW_PLAYER)) AND ((@IsNull_USER_DRAW_COMPUTER = 1 AND [USER_DRAW_COMPUTER] IS NULL) OR ([USER_DRAW_COMPUTER] = @Original_USER_DRAW_COMPUTER)) AND ((@IsNull_USER_LOSE_PLAYER = 1 AND [USER_LOSE_PLAYER] IS NULL) OR ([USER_LOSE_PLAYER] = @Original_USER_LOSE_PLAYER)) AND ((@IsNull_USER_LOSE_COMPUTER = 1 AND [USER_LOSE_COMPUTER] IS NULL) OR ([USER_LOSE_COMPUTER] = @Original_USER_LOSE_COMPUTER)) AND ((@IsNull_USER_XP = 1 AND [USER_XP] IS NULL) OR ([USER_XP] = @Original_USER_XP)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_LOGIN", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_LOGIN", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_PASSWORD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_PASSWORD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_EMAIL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_EMAIL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_NAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_SURNAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_SURNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_IP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [USER] ([USER_ID], [USER_LOGIN], [USER_PASSWORD], [USER_EMAIL], [USER_NAME], [USER_SURNAME], [USER_IP], [USER_WIN_PLAYER], [USER_WIN_COMPUTER], [USER_DRAW_PLAYER], [USER_DRAW_COMPUTER], [USER_LOSE_PLAYER], [USER_LOSE_COMPUTER], [USER_XP]) VALUES (@USER_ID, @USER_LOGIN, @USER_PASSWORD, @USER_EMAIL, @USER_NAME, @USER_SURNAME, @USER_IP, @USER_WIN_PLAYER, @USER_WIN_COMPUTER, @USER_DRAW_PLAYER, @USER_DRAW_COMPUTER, @USER_LOSE_PLAYER, @USER_LOSE_COMPUTER, @USER_XP);
SELECT USER_ID, USER_LOGIN, USER_PASSWORD, USER_EMAIL, USER_NAME, USER_SURNAME, USER_IP, USER_WIN_PLAYER, USER_WIN_COMPUTER, USER_DRAW_PLAYER, USER_DRAW_COMPUTER, USER_LOSE_PLAYER, USER_LOSE_COMPUTER, USER_XP FROM [USER] WHERE (USER_ID = @USER_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOGIN", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_PASSWORD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_EMAIL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_SURNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [USER] SET [USER_ID] = @USER_ID, [USER_LOGIN] = @USER_LOGIN, [USER_PASSWOR" +
                "D] = @USER_PASSWORD, [USER_EMAIL] = @USER_EMAIL, [USER_NAME] = @USER_NAME, [USER" +
                "_SURNAME] = @USER_SURNAME, [USER_IP] = @USER_IP, [USER_WIN_PLAYER] = @USER_WIN_P" +
                "LAYER, [USER_WIN_COMPUTER] = @USER_WIN_COMPUTER, [USER_DRAW_PLAYER] = @USER_DRAW" +
                "_PLAYER, [USER_DRAW_COMPUTER] = @USER_DRAW_COMPUTER, [USER_LOSE_PLAYER] = @USER_" +
                "LOSE_PLAYER, [USER_LOSE_COMPUTER] = @USER_LOSE_COMPUTER, [USER_XP] = @USER_XP WH" +
                "ERE (([USER_ID] = @Original_USER_ID) AND ((@IsNull_USER_LOGIN = 1 AND [USER_LOGI" +
                "N] IS NULL) OR ([USER_LOGIN] = @Original_USER_LOGIN)) AND ((@IsNull_USER_PASSWOR" +
                "D = 1 AND [USER_PASSWORD] IS NULL) OR ([USER_PASSWORD] = @Original_USER_PASSWORD" +
                ")) AND ((@IsNull_USER_EMAIL = 1 AND [USER_EMAIL] IS NULL) OR ([USER_EMAIL] = @Or" +
                "iginal_USER_EMAIL)) AND ((@IsNull_USER_NAME = 1 AND [USER_NAME] IS NULL) OR ([US" +
                "ER_NAME] = @Original_USER_NAME)) AND ((@IsNull_USER_SURNAME = 1 AND [USER_SURNAM" +
                "E] IS NULL) OR ([USER_SURNAME] = @Original_USER_SURNAME)) AND ((@IsNull_USER_IP " +
                "= 1 AND [USER_IP] IS NULL) OR ([USER_IP] = @Original_USER_IP)) AND ((@IsNull_USE" +
                "R_WIN_PLAYER = 1 AND [USER_WIN_PLAYER] IS NULL) OR ([USER_WIN_PLAYER] = @Origina" +
                "l_USER_WIN_PLAYER)) AND ((@IsNull_USER_WIN_COMPUTER = 1 AND [USER_WIN_COMPUTER] " +
                "IS NULL) OR ([USER_WIN_COMPUTER] = @Original_USER_WIN_COMPUTER)) AND ((@IsNull_U" +
                "SER_DRAW_PLAYER = 1 AND [USER_DRAW_PLAYER] IS NULL) OR ([USER_DRAW_PLAYER] = @Or" +
                "iginal_USER_DRAW_PLAYER)) AND ((@IsNull_USER_DRAW_COMPUTER = 1 AND [USER_DRAW_CO" +
                "MPUTER] IS NULL) OR ([USER_DRAW_COMPUTER] = @Original_USER_DRAW_COMPUTER)) AND (" +
                "(@IsNull_USER_LOSE_PLAYER = 1 AND [USER_LOSE_PLAYER] IS NULL) OR ([USER_LOSE_PLA" +
                "YER] = @Original_USER_LOSE_PLAYER)) AND ((@IsNull_USER_LOSE_COMPUTER = 1 AND [US" +
                "ER_LOSE_COMPUTER] IS NULL) OR ([USER_LOSE_COMPUTER] = @Original_USER_LOSE_COMPUT" +
                "ER)) AND ((@IsNull_USER_XP = 1 AND [USER_XP] IS NULL) OR ([USER_XP] = @Original_" +
                "USER_XP)));\r\nSELECT USER_ID, USER_LOGIN, USER_PASSWORD, USER_EMAIL, USER_NAME, U" +
                "SER_SURNAME, USER_IP, USER_WIN_PLAYER, USER_WIN_COMPUTER, USER_DRAW_PLAYER, USER" +
                "_DRAW_COMPUTER, USER_LOSE_PLAYER, USER_LOSE_COMPUTER, USER_XP FROM [USER] WHERE " +
                "(USER_ID = @USER_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOGIN", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_PASSWORD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_EMAIL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_SURNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_LOGIN", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_LOGIN", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_PASSWORD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_PASSWORD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_EMAIL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_EMAIL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_NAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_SURNAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_SURNAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_IP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_USER_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Morpions.Properties.Settings.Default.MorpionsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     [USER].*\r\nFROM         [USER]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [USER]\r\nWHERE     (USER_ID = @Original_USER_ID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT USER_DRAW_COMPUTER, USER_DRAW_PLAYER, USER_EMAIL, USER_ID, USER_IP, USER_L" +
                "OGIN, USER_LOSE_COMPUTER, USER_LOSE_PLAYER, USER_NAME, USER_PASSWORD, USER_SURNA" +
                "ME, USER_WIN_COMPUTER, USER_WIN_PLAYER, USER_XP FROM [USER] WHERE (USER_ID = @US" +
                "ER_ID)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"INSERT INTO [USER]
                      (USER_LOGIN, USER_PASSWORD, USER_EMAIL, USER_NAME, USER_SURNAME, USER_IP, USER_WIN_PLAYER, USER_WIN_COMPUTER, 
                      USER_DRAW_PLAYER, USER_DRAW_COMPUTER, USER_LOSE_PLAYER, USER_LOSE_COMPUTER, USER_XP)
VALUES     (@USER_LOGIN,@USER_PASSWORD,@USER_EMAIL,@USER_NAME,@USER_SURNAME,@USER_IP,@USER_WIN_PLAYER,@USER_WIN_COMPUTER,@USER_DRAW_PLAYER,@USER_DRAW_COMPUTER,@USER_LOSE_PLAYER,@USER_LOSE_COMPUTER,@USER_XP)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOGIN", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_PASSWORD", global::System.Data.SqlDbType.VarChar, 40, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_EMAIL", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NAME", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_SURNAME", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_IP", global::System.Data.SqlDbType.VarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_XP", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"UPDATE    [USER]
SET              
USER_LOGIN = @USER_LOGIN,
USER_PASSWORD = @USER_PASSWORD,
USER_EMAIL = @USER_EMAIL,
USER_NAME = @USER_NAME, 
USER_SURNAME = @USER_SURNAME,
USER_IP = @USER_IP,
USER_WIN_PLAYER = @USER_WIN_PLAYER, 
USER_WIN_COMPUTER = @USER_WIN_COMPUTER,
USER_DRAW_PLAYER = @USER_DRAW_PLAYER, 
USER_DRAW_COMPUTER = @USER_DRAW_COMPUTER, 
USER_LOSE_PLAYER = @USER_LOSE_PLAYER, 
USER_LOSE_COMPUTER = @USER_LOSE_COMPUTER,
USER_XP = @USER_XP
WHERE     (USER_ID = @Original_USER_ID);";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOGIN", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOGIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_PASSWORD", global::System.Data.SqlDbType.VarChar, 40, global::System.Data.ParameterDirection.Input, 0, 0, "USER_PASSWORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_EMAIL", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "USER_EMAIL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NAME", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_SURNAME", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "USER_SURNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_IP", global::System.Data.SqlDbType.VarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "USER_IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_XP", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BDD_Morpions.USERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BDD_Morpions.USERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BDD_Morpions.USERDataTable dataTable = new BDD_Morpions.USERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(BDD_Morpions.USERDataTable dataTable, int USER_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(USER_ID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BDD_Morpions.USERDataTable GetDataByID(int USER_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(USER_ID));
            BDD_Morpions.USERDataTable dataTable = new BDD_Morpions.USERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BDD_Morpions.USERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BDD_Morpions dataSet) {
            return this.Adapter.Update(dataSet, "USER");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_USER_ID, string Original_USER_LOGIN, string Original_USER_PASSWORD, string Original_USER_EMAIL, string Original_USER_NAME, string Original_USER_SURNAME, string Original_USER_IP, global::System.Nullable<int> Original_USER_WIN_PLAYER, global::System.Nullable<int> Original_USER_WIN_COMPUTER, global::System.Nullable<int> Original_USER_DRAW_PLAYER, global::System.Nullable<int> Original_USER_DRAW_COMPUTER, global::System.Nullable<int> Original_USER_LOSE_PLAYER, global::System.Nullable<int> Original_USER_LOSE_COMPUTER, global::System.Nullable<int> Original_USER_XP) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_USER_ID));
            if ((Original_USER_LOGIN == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_USER_LOGIN));
            }
            if ((Original_USER_PASSWORD == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_USER_PASSWORD));
            }
            if ((Original_USER_EMAIL == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_USER_EMAIL));
            }
            if ((Original_USER_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_USER_NAME));
            }
            if ((Original_USER_SURNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_USER_SURNAME));
            }
            if ((Original_USER_IP == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_USER_IP));
            }
            if ((Original_USER_WIN_PLAYER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_USER_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_USER_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_USER_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_USER_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_USER_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_USER_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_XP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_USER_XP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int USER_ID, string USER_LOGIN, string USER_PASSWORD, string USER_EMAIL, string USER_NAME, string USER_SURNAME, string USER_IP, global::System.Nullable<int> USER_WIN_PLAYER, global::System.Nullable<int> USER_WIN_COMPUTER, global::System.Nullable<int> USER_DRAW_PLAYER, global::System.Nullable<int> USER_DRAW_COMPUTER, global::System.Nullable<int> USER_LOSE_PLAYER, global::System.Nullable<int> USER_LOSE_COMPUTER, global::System.Nullable<int> USER_XP) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(USER_ID));
            if ((USER_LOGIN == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(USER_LOGIN));
            }
            if ((USER_PASSWORD == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(USER_PASSWORD));
            }
            if ((USER_EMAIL == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(USER_EMAIL));
            }
            if ((USER_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(USER_NAME));
            }
            if ((USER_SURNAME == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(USER_SURNAME));
            }
            if ((USER_IP == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(USER_IP));
            }
            if ((USER_WIN_PLAYER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(USER_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((USER_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(USER_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(USER_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(USER_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(USER_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(USER_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((USER_XP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(USER_XP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int USER_ID, 
                    string USER_LOGIN, 
                    string USER_PASSWORD, 
                    string USER_EMAIL, 
                    string USER_NAME, 
                    string USER_SURNAME, 
                    string USER_IP, 
                    global::System.Nullable<int> USER_WIN_PLAYER, 
                    global::System.Nullable<int> USER_WIN_COMPUTER, 
                    global::System.Nullable<int> USER_DRAW_PLAYER, 
                    global::System.Nullable<int> USER_DRAW_COMPUTER, 
                    global::System.Nullable<int> USER_LOSE_PLAYER, 
                    global::System.Nullable<int> USER_LOSE_COMPUTER, 
                    global::System.Nullable<int> USER_XP, 
                    int Original_USER_ID, 
                    string Original_USER_LOGIN, 
                    string Original_USER_PASSWORD, 
                    string Original_USER_EMAIL, 
                    string Original_USER_NAME, 
                    string Original_USER_SURNAME, 
                    string Original_USER_IP, 
                    global::System.Nullable<int> Original_USER_WIN_PLAYER, 
                    global::System.Nullable<int> Original_USER_WIN_COMPUTER, 
                    global::System.Nullable<int> Original_USER_DRAW_PLAYER, 
                    global::System.Nullable<int> Original_USER_DRAW_COMPUTER, 
                    global::System.Nullable<int> Original_USER_LOSE_PLAYER, 
                    global::System.Nullable<int> Original_USER_LOSE_COMPUTER, 
                    global::System.Nullable<int> Original_USER_XP) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(USER_ID));
            if ((USER_LOGIN == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(USER_LOGIN));
            }
            if ((USER_PASSWORD == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(USER_PASSWORD));
            }
            if ((USER_EMAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(USER_EMAIL));
            }
            if ((USER_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(USER_NAME));
            }
            if ((USER_SURNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(USER_SURNAME));
            }
            if ((USER_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(USER_IP));
            }
            if ((USER_WIN_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(USER_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((USER_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(USER_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(USER_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(USER_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(USER_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(USER_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((USER_XP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(USER_XP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_USER_ID));
            if ((Original_USER_LOGIN == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_USER_LOGIN));
            }
            if ((Original_USER_PASSWORD == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_USER_PASSWORD));
            }
            if ((Original_USER_EMAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_USER_EMAIL));
            }
            if ((Original_USER_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_USER_NAME));
            }
            if ((Original_USER_SURNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_USER_SURNAME));
            }
            if ((Original_USER_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_USER_IP));
            }
            if ((Original_USER_WIN_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_USER_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_USER_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_USER_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_USER_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_USER_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_USER_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_USER_XP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_USER_XP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string USER_LOGIN, 
                    string USER_PASSWORD, 
                    string USER_EMAIL, 
                    string USER_NAME, 
                    string USER_SURNAME, 
                    string USER_IP, 
                    global::System.Nullable<int> USER_WIN_PLAYER, 
                    global::System.Nullable<int> USER_WIN_COMPUTER, 
                    global::System.Nullable<int> USER_DRAW_PLAYER, 
                    global::System.Nullable<int> USER_DRAW_COMPUTER, 
                    global::System.Nullable<int> USER_LOSE_PLAYER, 
                    global::System.Nullable<int> USER_LOSE_COMPUTER, 
                    global::System.Nullable<int> USER_XP, 
                    int Original_USER_ID, 
                    string Original_USER_LOGIN, 
                    string Original_USER_PASSWORD, 
                    string Original_USER_EMAIL, 
                    string Original_USER_NAME, 
                    string Original_USER_SURNAME, 
                    string Original_USER_IP, 
                    global::System.Nullable<int> Original_USER_WIN_PLAYER, 
                    global::System.Nullable<int> Original_USER_WIN_COMPUTER, 
                    global::System.Nullable<int> Original_USER_DRAW_PLAYER, 
                    global::System.Nullable<int> Original_USER_DRAW_COMPUTER, 
                    global::System.Nullable<int> Original_USER_LOSE_PLAYER, 
                    global::System.Nullable<int> Original_USER_LOSE_COMPUTER, 
                    global::System.Nullable<int> Original_USER_XP) {
            return this.Update(Original_USER_ID, USER_LOGIN, USER_PASSWORD, USER_EMAIL, USER_NAME, USER_SURNAME, USER_IP, USER_WIN_PLAYER, USER_WIN_COMPUTER, USER_DRAW_PLAYER, USER_DRAW_COMPUTER, USER_LOSE_PLAYER, USER_LOSE_COMPUTER, USER_XP, Original_USER_ID, Original_USER_LOGIN, Original_USER_PASSWORD, Original_USER_EMAIL, Original_USER_NAME, Original_USER_SURNAME, Original_USER_IP, Original_USER_WIN_PLAYER, Original_USER_WIN_COMPUTER, Original_USER_DRAW_PLAYER, Original_USER_DRAW_COMPUTER, Original_USER_LOSE_PLAYER, Original_USER_LOSE_COMPUTER, Original_USER_XP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_USER_ID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_USER_ID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string USER_LOGIN, string USER_PASSWORD, string USER_EMAIL, string USER_NAME, string USER_SURNAME, string USER_IP, global::System.Nullable<int> USER_WIN_PLAYER, global::System.Nullable<int> USER_WIN_COMPUTER, global::System.Nullable<int> USER_DRAW_PLAYER, global::System.Nullable<int> USER_DRAW_COMPUTER, global::System.Nullable<int> USER_LOSE_PLAYER, global::System.Nullable<int> USER_LOSE_COMPUTER, global::System.Nullable<int> USER_XP) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((USER_LOGIN == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(USER_LOGIN));
            }
            if ((USER_PASSWORD == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(USER_PASSWORD));
            }
            if ((USER_EMAIL == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(USER_EMAIL));
            }
            if ((USER_NAME == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(USER_NAME));
            }
            if ((USER_SURNAME == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(USER_SURNAME));
            }
            if ((USER_IP == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(USER_IP));
            }
            if ((USER_WIN_PLAYER.HasValue == true)) {
                command.Parameters[6].Value = ((int)(USER_WIN_PLAYER.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((USER_WIN_COMPUTER.HasValue == true)) {
                command.Parameters[7].Value = ((int)(USER_WIN_COMPUTER.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_PLAYER.HasValue == true)) {
                command.Parameters[8].Value = ((int)(USER_DRAW_PLAYER.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_COMPUTER.HasValue == true)) {
                command.Parameters[9].Value = ((int)(USER_DRAW_COMPUTER.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_PLAYER.HasValue == true)) {
                command.Parameters[10].Value = ((int)(USER_LOSE_PLAYER.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_COMPUTER.HasValue == true)) {
                command.Parameters[11].Value = ((int)(USER_LOSE_COMPUTER.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((USER_XP.HasValue == true)) {
                command.Parameters[12].Value = ((int)(USER_XP.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQuery(string USER_LOGIN, string USER_PASSWORD, string USER_EMAIL, string USER_NAME, string USER_SURNAME, string USER_IP, global::System.Nullable<int> USER_WIN_PLAYER, global::System.Nullable<int> USER_WIN_COMPUTER, global::System.Nullable<int> USER_DRAW_PLAYER, global::System.Nullable<int> USER_DRAW_COMPUTER, global::System.Nullable<int> USER_LOSE_PLAYER, global::System.Nullable<int> USER_LOSE_COMPUTER, global::System.Nullable<int> USER_XP, int Original_USER_ID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((USER_LOGIN == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(USER_LOGIN));
            }
            if ((USER_PASSWORD == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(USER_PASSWORD));
            }
            if ((USER_EMAIL == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(USER_EMAIL));
            }
            if ((USER_NAME == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(USER_NAME));
            }
            if ((USER_SURNAME == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(USER_SURNAME));
            }
            if ((USER_IP == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(USER_IP));
            }
            if ((USER_WIN_PLAYER.HasValue == true)) {
                command.Parameters[6].Value = ((int)(USER_WIN_PLAYER.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((USER_WIN_COMPUTER.HasValue == true)) {
                command.Parameters[7].Value = ((int)(USER_WIN_COMPUTER.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_PLAYER.HasValue == true)) {
                command.Parameters[8].Value = ((int)(USER_DRAW_PLAYER.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((USER_DRAW_COMPUTER.HasValue == true)) {
                command.Parameters[9].Value = ((int)(USER_DRAW_COMPUTER.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_PLAYER.HasValue == true)) {
                command.Parameters[10].Value = ((int)(USER_LOSE_PLAYER.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((USER_LOSE_COMPUTER.HasValue == true)) {
                command.Parameters[11].Value = ((int)(USER_LOSE_COMPUTER.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((USER_XP.HasValue == true)) {
                command.Parameters[12].Value = ((int)(USER_XP.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            command.Parameters[13].Value = ((int)(Original_USER_ID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SCORE_HISTORIQUETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SCORE_HISTORIQUETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SCORE_HISTORIQUE";
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID");
            tableMapping.ColumnMappings.Add("HISTO_DATE", "HISTO_DATE");
            tableMapping.ColumnMappings.Add("HISTO_WIN_PLAYER", "HISTO_WIN_PLAYER");
            tableMapping.ColumnMappings.Add("HISTO_WIN_COMPUTER", "HISTO_WIN_COMPUTER");
            tableMapping.ColumnMappings.Add("HISTO_DRAW_PLAYER", "HISTO_DRAW_PLAYER");
            tableMapping.ColumnMappings.Add("HISTO_DRAW_COMPUTER", "HISTO_DRAW_COMPUTER");
            tableMapping.ColumnMappings.Add("HISTO_LOSE_PLAYER", "HISTO_LOSE_PLAYER");
            tableMapping.ColumnMappings.Add("HISTO_LOSE_COMPUTER", "HISTO_LOSE_COMPUTER");
            tableMapping.ColumnMappings.Add("HISTO_XP", "HISTO_XP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [SCORE_HISTORIQUE] WHERE (([USER_ID] = @Original_USER_ID) AND ([HISTO_DATE] = @Original_HISTO_DATE) AND ((@IsNull_HISTO_WIN_PLAYER = 1 AND [HISTO_WIN_PLAYER] IS NULL) OR ([HISTO_WIN_PLAYER] = @Original_HISTO_WIN_PLAYER)) AND ((@IsNull_HISTO_WIN_COMPUTER = 1 AND [HISTO_WIN_COMPUTER] IS NULL) OR ([HISTO_WIN_COMPUTER] = @Original_HISTO_WIN_COMPUTER)) AND ((@IsNull_HISTO_DRAW_PLAYER = 1 AND [HISTO_DRAW_PLAYER] IS NULL) OR ([HISTO_DRAW_PLAYER] = @Original_HISTO_DRAW_PLAYER)) AND ((@IsNull_HISTO_DRAW_COMPUTER = 1 AND [HISTO_DRAW_COMPUTER] IS NULL) OR ([HISTO_DRAW_COMPUTER] = @Original_HISTO_DRAW_COMPUTER)) AND ((@IsNull_HISTO_LOSE_PLAYER = 1 AND [HISTO_LOSE_PLAYER] IS NULL) OR ([HISTO_LOSE_PLAYER] = @Original_HISTO_LOSE_PLAYER)) AND ((@IsNull_HISTO_LOSE_COMPUTER = 1 AND [HISTO_LOSE_COMPUTER] IS NULL) OR ([HISTO_LOSE_COMPUTER] = @Original_HISTO_LOSE_COMPUTER)) AND ((@IsNull_HISTO_XP = 1 AND [HISTO_XP] IS NULL) OR ([HISTO_XP] = @Original_HISTO_XP)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [SCORE_HISTORIQUE] ([USER_ID], [HISTO_DATE], [HISTO_WIN_PLAYER], [HISTO_WIN_COMPUTER], [HISTO_DRAW_PLAYER], [HISTO_DRAW_COMPUTER], [HISTO_LOSE_PLAYER], [HISTO_LOSE_COMPUTER], [HISTO_XP]) VALUES (@USER_ID, @HISTO_DATE, @HISTO_WIN_PLAYER, @HISTO_WIN_COMPUTER, @HISTO_DRAW_PLAYER, @HISTO_DRAW_COMPUTER, @HISTO_LOSE_PLAYER, @HISTO_LOSE_COMPUTER, @HISTO_XP);
SELECT USER_ID, HISTO_DATE, HISTO_WIN_PLAYER, HISTO_WIN_COMPUTER, HISTO_DRAW_PLAYER, HISTO_DRAW_COMPUTER, HISTO_LOSE_PLAYER, HISTO_LOSE_COMPUTER, HISTO_XP FROM SCORE_HISTORIQUE WHERE (HISTO_DATE = @HISTO_DATE) AND (USER_ID = @USER_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [SCORE_HISTORIQUE] SET [USER_ID] = @USER_ID, [HISTO_DATE] = @HISTO_DATE, [" +
                "HISTO_WIN_PLAYER] = @HISTO_WIN_PLAYER, [HISTO_WIN_COMPUTER] = @HISTO_WIN_COMPUTE" +
                "R, [HISTO_DRAW_PLAYER] = @HISTO_DRAW_PLAYER, [HISTO_DRAW_COMPUTER] = @HISTO_DRAW" +
                "_COMPUTER, [HISTO_LOSE_PLAYER] = @HISTO_LOSE_PLAYER, [HISTO_LOSE_COMPUTER] = @HI" +
                "STO_LOSE_COMPUTER, [HISTO_XP] = @HISTO_XP WHERE (([USER_ID] = @Original_USER_ID)" +
                " AND ([HISTO_DATE] = @Original_HISTO_DATE) AND ((@IsNull_HISTO_WIN_PLAYER = 1 AN" +
                "D [HISTO_WIN_PLAYER] IS NULL) OR ([HISTO_WIN_PLAYER] = @Original_HISTO_WIN_PLAYE" +
                "R)) AND ((@IsNull_HISTO_WIN_COMPUTER = 1 AND [HISTO_WIN_COMPUTER] IS NULL) OR ([" +
                "HISTO_WIN_COMPUTER] = @Original_HISTO_WIN_COMPUTER)) AND ((@IsNull_HISTO_DRAW_PL" +
                "AYER = 1 AND [HISTO_DRAW_PLAYER] IS NULL) OR ([HISTO_DRAW_PLAYER] = @Original_HI" +
                "STO_DRAW_PLAYER)) AND ((@IsNull_HISTO_DRAW_COMPUTER = 1 AND [HISTO_DRAW_COMPUTER" +
                "] IS NULL) OR ([HISTO_DRAW_COMPUTER] = @Original_HISTO_DRAW_COMPUTER)) AND ((@Is" +
                "Null_HISTO_LOSE_PLAYER = 1 AND [HISTO_LOSE_PLAYER] IS NULL) OR ([HISTO_LOSE_PLAY" +
                "ER] = @Original_HISTO_LOSE_PLAYER)) AND ((@IsNull_HISTO_LOSE_COMPUTER = 1 AND [H" +
                "ISTO_LOSE_COMPUTER] IS NULL) OR ([HISTO_LOSE_COMPUTER] = @Original_HISTO_LOSE_CO" +
                "MPUTER)) AND ((@IsNull_HISTO_XP = 1 AND [HISTO_XP] IS NULL) OR ([HISTO_XP] = @Or" +
                "iginal_HISTO_XP)));\r\nSELECT USER_ID, HISTO_DATE, HISTO_WIN_PLAYER, HISTO_WIN_COM" +
                "PUTER, HISTO_DRAW_PLAYER, HISTO_DRAW_COMPUTER, HISTO_LOSE_PLAYER, HISTO_LOSE_COM" +
                "PUTER, HISTO_XP FROM SCORE_HISTORIQUE WHERE (HISTO_DATE = @HISTO_DATE) AND (USER" +
                "_ID = @USER_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HISTO_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_XP", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Morpions.Properties.Settings.Default.MorpionsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SCORE_HISTORIQUE.*\r\nFROM         SCORE_HISTORIQUE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [SCORE_HISTORIQUE] WHERE ([USER_ID] = @Original_USER_ID) AND ([HISTO_" +
                "DATE] = @Original_HISTO_DATE)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DATE", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT HISTO_DATE, HISTO_DRAW_COMPUTER, HISTO_DRAW_PLAYER, HISTO_LOSE_COMPUTER, H" +
                "ISTO_LOSE_PLAYER, HISTO_WIN_COMPUTER, HISTO_WIN_PLAYER, HISTO_XP, USER_ID FROM S" +
                "CORE_HISTORIQUE WHERE (USER_ID = @USER_ID) AND (HISTO_DATE = @HISTO_DATE)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DATE", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"INSERT INTO [SCORE_HISTORIQUE] ([USER_ID], [HISTO_DATE], [HISTO_WIN_PLAYER], [HISTO_WIN_COMPUTER], [HISTO_DRAW_PLAYER], [HISTO_DRAW_COMPUTER], [HISTO_LOSE_PLAYER], [HISTO_LOSE_COMPUTER], [HISTO_XP]) VALUES (@USER_ID, @HISTO_DATE, @HISTO_WIN_PLAYER, @HISTO_WIN_COMPUTER, @HISTO_DRAW_PLAYER, @HISTO_DRAW_COMPUTER, @HISTO_LOSE_PLAYER, @HISTO_LOSE_COMPUTER, @HISTO_XP);";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DATE", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_XP", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"UPDATE    SCORE_HISTORIQUE
SET              HISTO_WIN_PLAYER = @HISTO_WIN_PLAYER, HISTO_WIN_COMPUTER = @HISTO_WIN_COMPUTER, 
                      HISTO_DRAW_PLAYER = @HISTO_DRAW_PLAYER, HISTO_DRAW_COMPUTER = @HISTO_DRAW_COMPUTER, 
                      HISTO_LOSE_PLAYER = @HISTO_LOSE_PLAYER, HISTO_LOSE_COMPUTER = @HISTO_LOSE_COMPUTER, HISTO_XP = @HISTO_XP
WHERE     (USER_ID = @Original_USER_ID) AND (HISTO_DATE = @Original_HISTO_DATE);";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_WIN_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_WIN_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_DRAW_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DRAW_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_PLAYER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_PLAYER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_LOSE_COMPUTER", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_LOSE_COMPUTER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HISTO_XP", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_XP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_USER_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "USER_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HISTO_DATE", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "HISTO_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BDD_Morpions.SCORE_HISTORIQUEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BDD_Morpions.SCORE_HISTORIQUEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BDD_Morpions.SCORE_HISTORIQUEDataTable dataTable = new BDD_Morpions.SCORE_HISTORIQUEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(BDD_Morpions.SCORE_HISTORIQUEDataTable dataTable, int USER_ID, System.DateTime HISTO_DATE) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(USER_ID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(HISTO_DATE));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BDD_Morpions.SCORE_HISTORIQUEDataTable GetDataByID(int USER_ID, System.DateTime HISTO_DATE) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(USER_ID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(HISTO_DATE));
            BDD_Morpions.SCORE_HISTORIQUEDataTable dataTable = new BDD_Morpions.SCORE_HISTORIQUEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BDD_Morpions.SCORE_HISTORIQUEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BDD_Morpions dataSet) {
            return this.Adapter.Update(dataSet, "SCORE_HISTORIQUE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_USER_ID, System.DateTime Original_HISTO_DATE, global::System.Nullable<int> Original_HISTO_WIN_PLAYER, global::System.Nullable<int> Original_HISTO_WIN_COMPUTER, global::System.Nullable<int> Original_HISTO_DRAW_PLAYER, global::System.Nullable<int> Original_HISTO_DRAW_COMPUTER, global::System.Nullable<int> Original_HISTO_LOSE_PLAYER, global::System.Nullable<int> Original_HISTO_LOSE_COMPUTER, global::System.Nullable<int> Original_HISTO_XP) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_USER_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_HISTO_DATE));
            if ((Original_HISTO_WIN_PLAYER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_HISTO_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_HISTO_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_HISTO_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_HISTO_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_HISTO_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_HISTO_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_XP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_HISTO_XP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int USER_ID, System.DateTime HISTO_DATE, global::System.Nullable<int> HISTO_WIN_PLAYER, global::System.Nullable<int> HISTO_WIN_COMPUTER, global::System.Nullable<int> HISTO_DRAW_PLAYER, global::System.Nullable<int> HISTO_DRAW_COMPUTER, global::System.Nullable<int> HISTO_LOSE_PLAYER, global::System.Nullable<int> HISTO_LOSE_COMPUTER, global::System.Nullable<int> HISTO_XP) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(USER_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(HISTO_DATE));
            if ((HISTO_WIN_PLAYER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(HISTO_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((HISTO_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(HISTO_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(HISTO_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(HISTO_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(HISTO_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(HISTO_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((HISTO_XP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(HISTO_XP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int USER_ID, 
                    System.DateTime HISTO_DATE, 
                    global::System.Nullable<int> HISTO_WIN_PLAYER, 
                    global::System.Nullable<int> HISTO_WIN_COMPUTER, 
                    global::System.Nullable<int> HISTO_DRAW_PLAYER, 
                    global::System.Nullable<int> HISTO_DRAW_COMPUTER, 
                    global::System.Nullable<int> HISTO_LOSE_PLAYER, 
                    global::System.Nullable<int> HISTO_LOSE_COMPUTER, 
                    global::System.Nullable<int> HISTO_XP, 
                    int Original_USER_ID, 
                    System.DateTime Original_HISTO_DATE, 
                    global::System.Nullable<int> Original_HISTO_WIN_PLAYER, 
                    global::System.Nullable<int> Original_HISTO_WIN_COMPUTER, 
                    global::System.Nullable<int> Original_HISTO_DRAW_PLAYER, 
                    global::System.Nullable<int> Original_HISTO_DRAW_COMPUTER, 
                    global::System.Nullable<int> Original_HISTO_LOSE_PLAYER, 
                    global::System.Nullable<int> Original_HISTO_LOSE_COMPUTER, 
                    global::System.Nullable<int> Original_HISTO_XP) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(USER_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(HISTO_DATE));
            if ((HISTO_WIN_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(HISTO_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((HISTO_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(HISTO_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(HISTO_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(HISTO_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(HISTO_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(HISTO_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((HISTO_XP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(HISTO_XP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_USER_ID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_HISTO_DATE));
            if ((Original_HISTO_WIN_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_HISTO_WIN_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_WIN_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_HISTO_WIN_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_DRAW_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_HISTO_DRAW_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_DRAW_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_HISTO_DRAW_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_LOSE_PLAYER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_HISTO_LOSE_PLAYER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_LOSE_COMPUTER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_HISTO_LOSE_COMPUTER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_HISTO_XP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_HISTO_XP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> HISTO_WIN_PLAYER, 
                    global::System.Nullable<int> HISTO_WIN_COMPUTER, 
                    global::System.Nullable<int> HISTO_DRAW_PLAYER, 
                    global::System.Nullable<int> HISTO_DRAW_COMPUTER, 
                    global::System.Nullable<int> HISTO_LOSE_PLAYER, 
                    global::System.Nullable<int> HISTO_LOSE_COMPUTER, 
                    global::System.Nullable<int> HISTO_XP, 
                    int Original_USER_ID, 
                    System.DateTime Original_HISTO_DATE, 
                    global::System.Nullable<int> Original_HISTO_WIN_PLAYER, 
                    global::System.Nullable<int> Original_HISTO_WIN_COMPUTER, 
                    global::System.Nullable<int> Original_HISTO_DRAW_PLAYER, 
                    global::System.Nullable<int> Original_HISTO_DRAW_COMPUTER, 
                    global::System.Nullable<int> Original_HISTO_LOSE_PLAYER, 
                    global::System.Nullable<int> Original_HISTO_LOSE_COMPUTER, 
                    global::System.Nullable<int> Original_HISTO_XP) {
            return this.Update(Original_USER_ID, Original_HISTO_DATE, HISTO_WIN_PLAYER, HISTO_WIN_COMPUTER, HISTO_DRAW_PLAYER, HISTO_DRAW_COMPUTER, HISTO_LOSE_PLAYER, HISTO_LOSE_COMPUTER, HISTO_XP, Original_USER_ID, Original_HISTO_DATE, Original_HISTO_WIN_PLAYER, Original_HISTO_WIN_COMPUTER, Original_HISTO_DRAW_PLAYER, Original_HISTO_DRAW_COMPUTER, Original_HISTO_LOSE_PLAYER, Original_HISTO_LOSE_COMPUTER, Original_HISTO_XP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_USER_ID, System.DateTime Original_HISTO_DATE) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_USER_ID));
            command.Parameters[1].Value = ((System.DateTime)(Original_HISTO_DATE));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(int USER_ID, System.DateTime HISTO_DATE, global::System.Nullable<int> HISTO_WIN_PLAYER, global::System.Nullable<int> HISTO_WIN_COMPUTER, global::System.Nullable<int> HISTO_DRAW_PLAYER, global::System.Nullable<int> HISTO_DRAW_COMPUTER, global::System.Nullable<int> HISTO_LOSE_PLAYER, global::System.Nullable<int> HISTO_LOSE_COMPUTER, global::System.Nullable<int> HISTO_XP) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(USER_ID));
            command.Parameters[1].Value = ((System.DateTime)(HISTO_DATE));
            if ((HISTO_WIN_PLAYER.HasValue == true)) {
                command.Parameters[2].Value = ((int)(HISTO_WIN_PLAYER.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((HISTO_WIN_COMPUTER.HasValue == true)) {
                command.Parameters[3].Value = ((int)(HISTO_WIN_COMPUTER.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_PLAYER.HasValue == true)) {
                command.Parameters[4].Value = ((int)(HISTO_DRAW_PLAYER.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_COMPUTER.HasValue == true)) {
                command.Parameters[5].Value = ((int)(HISTO_DRAW_COMPUTER.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_PLAYER.HasValue == true)) {
                command.Parameters[6].Value = ((int)(HISTO_LOSE_PLAYER.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_COMPUTER.HasValue == true)) {
                command.Parameters[7].Value = ((int)(HISTO_LOSE_COMPUTER.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((HISTO_XP.HasValue == true)) {
                command.Parameters[8].Value = ((int)(HISTO_XP.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQuery(global::System.Nullable<int> HISTO_WIN_PLAYER, global::System.Nullable<int> HISTO_WIN_COMPUTER, global::System.Nullable<int> HISTO_DRAW_PLAYER, global::System.Nullable<int> HISTO_DRAW_COMPUTER, global::System.Nullable<int> HISTO_LOSE_PLAYER, global::System.Nullable<int> HISTO_LOSE_COMPUTER, global::System.Nullable<int> HISTO_XP, int Original_USER_ID, System.DateTime Original_HISTO_DATE) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((HISTO_WIN_PLAYER.HasValue == true)) {
                command.Parameters[0].Value = ((int)(HISTO_WIN_PLAYER.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((HISTO_WIN_COMPUTER.HasValue == true)) {
                command.Parameters[1].Value = ((int)(HISTO_WIN_COMPUTER.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_PLAYER.HasValue == true)) {
                command.Parameters[2].Value = ((int)(HISTO_DRAW_PLAYER.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((HISTO_DRAW_COMPUTER.HasValue == true)) {
                command.Parameters[3].Value = ((int)(HISTO_DRAW_COMPUTER.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_PLAYER.HasValue == true)) {
                command.Parameters[4].Value = ((int)(HISTO_LOSE_PLAYER.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HISTO_LOSE_COMPUTER.HasValue == true)) {
                command.Parameters[5].Value = ((int)(HISTO_LOSE_COMPUTER.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((HISTO_XP.HasValue == true)) {
                command.Parameters[6].Value = ((int)(HISTO_XP.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            command.Parameters[7].Value = ((int)(Original_USER_ID));
            command.Parameters[8].Value = ((System.DateTime)(Original_HISTO_DATE));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private USERTableAdapter _uSERTableAdapter;
        
        private SCORE_HISTORIQUETableAdapter _sCORE_HISTORIQUETableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public USERTableAdapter USERTableAdapter {
            get {
                return this._uSERTableAdapter;
            }
            set {
                if (((this._uSERTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._uSERTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm" +
                            "e chaîne de connexion.");
                }
                this._uSERTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SCORE_HISTORIQUETableAdapter SCORE_HISTORIQUETableAdapter {
            get {
                return this._sCORE_HISTORIQUETableAdapter;
            }
            set {
                if (((this._sCORE_HISTORIQUETableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._sCORE_HISTORIQUETableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm" +
                            "e chaîne de connexion.");
                }
                this._sCORE_HISTORIQUETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._uSERTableAdapter != null) 
                            && (this._uSERTableAdapter.Connection != null))) {
                    return this._uSERTableAdapter.Connection;
                }
                if (((this._sCORE_HISTORIQUETableAdapter != null) 
                            && (this._sCORE_HISTORIQUETableAdapter.Connection != null))) {
                    return this._sCORE_HISTORIQUETableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._uSERTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sCORE_HISTORIQUETableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(BDD_Morpions dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._uSERTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.USER.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._uSERTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sCORE_HISTORIQUETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SCORE_HISTORIQUE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sCORE_HISTORIQUETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(BDD_Morpions dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._uSERTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.USER.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._uSERTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sCORE_HISTORIQUETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SCORE_HISTORIQUE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sCORE_HISTORIQUETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(BDD_Morpions dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._sCORE_HISTORIQUETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SCORE_HISTORIQUE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sCORE_HISTORIQUETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._uSERTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.USER.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._uSERTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(BDD_Morpions dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager ne contient pas d\'informations de connexion. Définissez chaqu" +
                        "e propriété TableAdapterManager TableAdapter à une instance valide de TableAdapt" +
                        "er.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("La transaction ne peut pas commencer. La connexion de données actuelle ne prend p" +
                        "as en charge les transactions ou l\'état actuel n\'autorise pas le début de la tra" +
                        "nsaction.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._uSERTableAdapter != null)) {
                    revertConnections.Add(this._uSERTableAdapter, this._uSERTableAdapter.Connection);
                    this._uSERTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._uSERTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._uSERTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._uSERTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._uSERTableAdapter.Adapter);
                    }
                }
                if ((this._sCORE_HISTORIQUETableAdapter != null)) {
                    revertConnections.Add(this._sCORE_HISTORIQUETableAdapter, this._sCORE_HISTORIQUETableAdapter.Connection);
                    this._sCORE_HISTORIQUETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sCORE_HISTORIQUETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sCORE_HISTORIQUETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sCORE_HISTORIQUETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sCORE_HISTORIQUETableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._uSERTableAdapter != null)) {
                    this._uSERTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._uSERTableAdapter]));
                    this._uSERTableAdapter.Transaction = null;
                }
                if ((this._sCORE_HISTORIQUETableAdapter != null)) {
                    this._sCORE_HISTORIQUETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sCORE_HISTORIQUETableAdapter]));
                    this._sCORE_HISTORIQUETableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591